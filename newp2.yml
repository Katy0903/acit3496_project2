acit3495p2@acit3495p2:~$ cat project2.yml
---
apiVersion: v1
kind: Namespace
metadata:
  name: video-streaming
---
# ConfigMap for init.sql
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-initdb-config
  namespace: video-streaming
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS video_db;

    -- Use the video_db database
    USE video_db;

    -- Create the users table (for storing username and password)
    CREATE TABLE IF NOT EXISTS users (
        id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(255) UNIQUE NOT NULL,
        password VARCHAR(255) NOT NULL
    );

    -- Create the videos table (for storing the file paths of uploaded videos)
    CREATE TABLE IF NOT EXISTS videos (
        id INT AUTO_INCREMENT PRIMARY KEY,
        username VARCHAR(255) NOT NULL,
        path VARCHAR(255) NOT NULL,
        original_name VARCHAR(255) NOT NULL,
        FOREIGN KEY (username) REFERENCES users(username)
    );
---
# Web App Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-app
  namespace: video-streaming
spec:
  replicas: 2
  selector:
    matchLabels:
      app: web-app
  template:
    metadata:
      labels:
        app: web-app
    spec:
      initContainers:
      - name: wait-for-mysql
        image: busybox
        command: ['sh', '-c', 'until nc -z mysql 3306; do echo waiting for mysql; sleep 2; done;']
      containers:
      - name: web-app
        image: katychan/web-app:latest
        ports:
        - containerPort: 8080
        env:
        - name: MYSQL_HOST
          value: mysql
        - name: MYSQL_USER
          value: root
        - name: MYSQL_PASSWORD
          value: rootpassword
        - name: MYSQL_DB
          value: video_db
        volumeMounts:
        - name: storage
          mountPath: /storage
        resources:
          requests:
            cpu: "100m"
            memory: "128Mi"
          limits:
            cpu: "500m"
            memory: "512Mi"
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: video-storage-pvc
---
# Web App Service
apiVersion: v1
kind: Service
metadata:
  name: web-app
  namespace: video-streaming
spec:
  type: NodePort
  selector:
    app: web-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
      nodePort: 30080
---
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
  namespace: video-streaming
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: katychan/mysql:latest
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: rootpassword
        - name: MYSQL_DATABASE
          value: video_db
        volumeMounts:
        - name: mysql-pv
          mountPath: /var/lib/mysql
        - name: initdb
          mountPath: /docker-entrypoint-initdb.d
        readinessProbe:
          exec:
            command:
              - sh
              - -c
              - mysqladmin ping -h 127.0.0.1 -uroot -prootpassword
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: mysql-pv
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: initdb
        configMap:
          name: mysql-initdb-config
---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql
  namespace: video-streaming
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
---
# Storage Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: storage
  namespace: video-streaming
spec:
  selector:
    matchLabels:
      app: storage
  template:
    metadata:
      labels:
        app: storage
    spec:
      containers:
      - name: storage
        image: katychan/storage1:latest
        volumeMounts:
        - name: storage
          mountPath: /storage
      volumes:
      - name: storage
        persistentVolumeClaim:
          claimName: video-storage-pvc
---
# Storage Service
apiVersion: v1
kind: Service
metadata:
  name: storage
  namespace: video-streaming
spec:
  selector:
    app: storage
  ports:
    - port: 80
---
# PVC for Storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: video-storage-pvc
  namespace: video-streaming
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
# PVC for MySQL
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
  namespace: video-streaming
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# HPA for Web App
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: web-app-hpa
  namespace: video-streaming
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: web-app
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50